#include<bits/stdc++.h>
using namespace std;
const int MAXN = 500000 + 10, MAXK = 26;
char str[MAXN + 50];
struct Palindrome_Automaton {
	int Size, Last, Root0, Root1, Trans[MAXN + 5][MAXK + 5], Link[MAXN + 5];
	int Len[MAXN + 5], Cnt[MAXN + 5];

	Palindrome_Automaton() {
		Root0 = Size ++, Root1 = Size ++;
		Last = Root1;
		Len[ Root0 ] = 0, Link[ Root0 ] = Root1;
		Len[ Root1 ] = -1, Link[ Root1 ] = Root1;
	}
	void Extend(int ch, int dex) {
		int u = Last;
		for ( ; str[ dex - Len[ u ] - 1 ] != str[ dex ] ; u = Link[ u ] );
		if ( !Trans[ u ][ ch ] ) {
			int Newnode = ++ Size, v = Link[ u ];
			Len[ Newnode ] = Len[ u ] + 2;

			for ( ; str[ dex - Len[ v ] - 1 ] != str[ dex ] ; v = Link[ v ] );
			Link[ Newnode ] = Trans[ v ][ ch ], Trans[ u ][ ch ] = Newnode;
			Cnt[ Newnode ] = Cnt[ Link[ Newnode ] ] + 1;
		}
		Last = Trans[ u ][ ch ];
	}

	void Build(char* str) {
		int len = strlen(str);
		for ( int i = 0 ; i < len ; i ++ ) {
			Extend(str[i] - 'a' + 1, i);
			cout << Cnt[Last] << " ";
		}
	}
} PAM;

void work() {
	cin >> str;
	PAM.Build(str);
	cout << endl;
}
