//
//  main.cpp
//  xcode_c++_test
//
//  Created by XHY on 2023/5/5.
//

#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<bitset>
#include<cassert>
#include<cctype>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<deque>
#include<iomanip>
#include<list>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<vector>
#include<numeric>
#include<unordered_set>
#include<unordered_map>
using namespace std;

#define fr first
#define se second
#define et0 exit(0);
#define rep(i, a, b) for(int i = (int)(a); i <= (int)(b); i ++)
#define rrep(i, a, b) for(int i = (int)(a); i >= (int)(b); i --)
#define IO ios::sync_with_stdio(false),cin.tie(0);

typedef long long LL;
typedef pair<int, int> PII;
typedef unsigned long long ULL;
 
const int INF = 0X3f3f3f3f, N = 1e6 + 10, M = 20, MOD = 1e9 + 7;
const double eps = 1e-7, pi = acos(-1);

int n, m, divi;
int a[N], clr[N], ans[N], res;

int Qnum, Cnum;
struct QUE {
    int l, r, id, pre;
} que[N];

struct CHANGE {
    int pos, val;
} chg[N];

bool Mo_Cmp(QUE &x, QUE &y) {
    if (x.l / divi != y.l / divi) return x.l < y.l;
    if (x.r / divi != y.r / divi) return x.r < y.r;
    return x.pre < y.pre;
}

void del(int x) {
    if (--clr[x] == 0) res--;
}

void add(int x) {
    if (++clr[x] == 1) res++;
}

void modify(int uc, int uq) {
    if (chg[uc].pos <= que[uq].r && chg[uc].pos >= que[uq].l) {
        if (--clr[a[chg[uc].pos]] == 0) res--;
        if (++clr[chg[uc].val] == 1) res++;
    }
    swap(a[chg[uc].pos], chg[uc].val);
}

void Mo() {
    int ul = 1, ur = 0, uc = 0;
    rep (i, 1, Qnum) {
        int l = que[i].l, r = que[i].r;
        while (ul < l) del(a[ul++]);
        while (ul > l) add(a[--ul]);
        while (ur < r) add(a[++ur]);
        while (ur > r) del(a[ur--]);
        
        while (uc < que[i].pre) modify(++uc, i);
        while (uc > que[i].pre) modify(uc--, i);
        
        ans[que[i].id] = res;
    }
}

void work() { // 复杂度O(n^(2/3))
    scanf("%d%d", &n, &m);
    divi = pow(n, 0.666);
    rep (i, 1, n) scanf("%d", &a[i]);
    rep (i, 1, m) {
        char op;
        cin >> op;
        if (op == 'Q') {
            cin >> que[++Qnum].l >> que[Qnum].r;
            que[Qnum].id = Qnum;
            que[Qnum].pre = Cnum;
        }
        else cin >> chg[++Cnum].pos >> chg[Cnum].val;
    }
    
    sort(que + 1, que + Qnum + 1, Mo_Cmp);
    Mo();
    
    rep (i, 1, Qnum) printf("%d\n", ans[i]); //cout << ans[i] << "\n";
}

/*

*/

signed main() {
    IO
    
    int test = 1;
//    cin >> test;
    while (test--) work();
    
    return 0;
}
