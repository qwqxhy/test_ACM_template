#pragma GCC optimize(2)
#include<bits/stdc++.h>
using namespace std;

#define fr first
#define se second
#define et0 exit(0);
#define rep(i, a, b) for(int i = (int)(a); i <= (int)(b); i ++)
#define rrep(i, a, b) for(int i = (int)(a); i >= (int)(b); i --)
#define IO ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef unsigned long long ULL;

const int INF = 0X3f3f3f3f, N = 200 + 10, M = 5000 + 10, MOD = 1e9 + 7;
const double eps = 1e-7, pi = acos(-1);

int aim;

int dep[N];

int head[N], idx;

struct EGDE {
	int to, next; 
	LL w;
} eg[M << 1];

void add(int x, int y, int w) {
	eg[idx].to = y;
	eg[idx].next = head[x];
	eg[idx].w = w;
	head[x] = idx++;
}

int bfs(int S, int T) {
	queue<int> Q;
	memset(dep, 0, sizeof dep);
	dep[S] = 1;
	Q.push(S);
	
	while (!Q.empty()) {
		int u = Q.front();
		Q.pop();
		for (int i = head[u]; ~i; i = eg[i].next) {
			int to = eg[i].to;
			if (eg[i].w && !dep[to]) {
				dep[to] = dep[u] + 1;
				Q.push(to);
			}
		}
	}
	
	return dep[T];
}

LL dfs(int u, LL rf) {
	if (u == aim) return rf;
	
	LL uf = 0;
	for (int i = head[u]; ~i; i = eg[i].next) {
		int to = eg[i].to;
		if (eg[i].w && dep[to] == dep[u] + 1) {
			LL tf = dfs(to, min(rf, eg[i].w));
			eg[i].w -= tf, eg[i ^ 1].w += tf;
			rf -= tf, uf += tf;
		}
	}
	
	if (!uf) dep[u] = -2;
	return uf;
}

LL maxflow(int S, int T) {
	LL res = 0;
	aim = T;
	
	while (bfs(S, T)) res += dfs(S, 1ll << 31);
	
	return res;
}

void work() {
	int n, m, s, t;
	memset(head, -1, sizeof head);
	
	cin >> n >> m >> s >> t;
	rep (i, 1, m) {
		LL u, v, w;
		cin >> u >> v >> w;
		add(u, v, w), add(v, u, 0);
	}
	
	cout << maxflow(s, t) << endl;
}

signed main() {
	IO
	
	int test = 1;
	//	cin >> test;
	
	while (test--) {
		work();
	}
	
	return 0;
}