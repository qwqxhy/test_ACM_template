#include<bits/stdc++.h>
using namespace std;

#define S_IT set<Node>::iterator
#define int long long
#define fr first
#define se second
#define et0 exit(0);
#define rep(i, a, b) for(int i = (int)(a); i <= (int)(b); i ++)
#define rrep(i, a, b) for(int i = (int)(a); i >= (int)(b); i --)
#define IO ios::sync_with_stdio(false),cin.tie(0);

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef unsigned long long ULL;

const int INF = 0X3f3f3f3f, N = 1e5 + 10, MOD = 1e9 + 7;
const double eps = 1e-7, pi = acos(-1);

int n, m, seed, vmax; 

struct Node {
	int l, r;
	mutable int w;
	Node (int x, int y = 0, int z = 0);
	bool operator < (const Node &t) const {
		return l < t.l;
	}
};

set<Node> S;

Node::Node(int x, int y, int z) {
	l = x, y = r, w = z;
}

bool cmp(PII &x, PII &y) {
	return x.fr < y.fr;
}

int rnd() {
	int ret = seed;
	seed = (seed * 7 + 13) % MOD;
	return ret;
}

LL qmi(LL a, LL b, LL p) {
	LL base = a, res = 1;
	while (b) {
		if (b & 1) res = res * base % p;
		base = base * base % p;
		b >>= 1;
	}
	return res % p;
}

S_IT split(int x) {
	S_IT it = S.lower_bound(Node(x));
	if (it != S.end() && it -> l == x) return it;
	it--;
	int l = it -> l, r = it -> r, tmp = it -> w;
	S.erase(it), S.insert(Node(l, x - 1, tmp));
	return S.insert(Node(x, r, tmp)).first;
}

void add(int l, int r, int x) {
	S_IT it2 = split(r + 1), it1 = split(l);
	while (it1 != it2) {
		it1 -> w += x;
		it1++;
	}
}

void assign(int l, int r, int x) {
	S_IT it2 = split(r + 1), it1 = split(l);
	S.erase(it1, it2);
	S.insert(Node(l, r, x));
}

int query_rank(int l, int r, int x) {
	S_IT it2 = split(r + 1), it1 = split(l);
	vector<PII> tmp;
	while (it1 != it2) {
		tmp.push_back({it1 -> w, it1 -> r - it1 -> l + 1});
		it1++;	
	}
	sort(tmp.begin(), tmp.end(), cmp);
	int sum = 0;
	rep (i, 0, tmp.size() - 1) {
		sum += tmp[i].se;
		if (sum >= x) return tmp[i].fr;
	}
}

int query_sum(int l, int r, int x, int y) {
	S_IT it2 = split(r + 1), it1 = split(l);
	int res = 0;
	while (it1 != it2) {
		res = (it1 -> r - it1 -> l + 1) * (res + qmi(it1 -> w, x, y)) % y;
		it1++;
	}
	return res;
}

void work() {
	cin >> n >> m >> seed >> vmax;
	rep (i, 1, n) S.insert(Node(i, i, rnd() % vmax + 1));
	S.insert(Node(n + 1, n + 1, 0));
	
	while (m--) {
		int op, l, r, x, y;
		op = rnd() % 4 + 1, l = rnd() % n + 1, r = rnd() % n + 1;
		if (l > r) swap(l, r);
		if (op == 3) x = rnd() % (r - l + 1) + 1;
		else x = rnd() % vmax + 1;
		if (op == 4) y = rnd() % vmax + 1;
		
		if (op == 1) add(l, r, x);
		else if (op == 2) assign(l, r, x);
		else if (op == 3) cout << query_rank(l, r, x) << endl;
		else cout << query_sum(l, r, x, y) << endl;
	}
}

signed main() {
	IO

	int test = 1;

	while (test--) {
		work();
	}

	return 0;
}