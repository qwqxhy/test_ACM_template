#pragma GCC optimize(2)
#include<bits/stdc++.h>
using namespace std;

#define fr first
#define se second
#define et0 exit(0);
#define rep(i, a, b) for(int i = (int)(a); i <= (int)(b); i ++)
#define rrep(i, a, b) for(int i = (int)(a); i >= (int)(b); i --)
#define IO ios::sync_with_stdio(false),cin.tie(0);

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef unsigned long long ULL;

const int INF = 0X3f3f3f3f, N = 40, MOD = 1e9 + 7;
const double eps = 1e-7, pi = acos(-1);

int K, B;
int C[N][N], fact[N], infact[N];

void init() {
    C[0][0] = 1;
    rep (i, 1, N - 1) {
        C[i][0] = 1;
        rep (j, 1, i) C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
    }
}

int dp(int n) {
    if (!n) return 0;
    vector<int> nums;
    while (n) {
        nums.push_back(n % B);
        n /= B;
    }

    int res = 0, last = 0;
    rrep (i, nums.size() - 1, 0) {
        int x = nums[i];
        if (x) {
            res += C[i][K - last];
            if (x > 1 && K - last - 1 >= 0) res += C[i][K - last - 1];
            if (x != 1) break;
        }
        if (x) last++;
        if (last > K) break;
        if (last == K && !i) res++;
    }
    return res;
}

void work() {
    int l, r;
    cin >> l >> r >> K >> B;
    cout << dp(r) - dp(l - 1) << endl;
}

signed main() {
    IO
    init();

    int test = 1;

    while (test--) {
        work();
    }

    return 0;
}

