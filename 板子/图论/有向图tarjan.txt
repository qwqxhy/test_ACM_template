int dfn[N], low[N], timestamp;
int stk[N], top;
bool in_stk[N];
int id[N], scc_cnt, Size[N];
int dout[N], din[N];

void tarjan(int u) {
	dfn[u] = low[u] = ++ timestamp;
	stk[ ++ top] = u, in_stk[u] = true;
	for (int i = head[u]; ~i; i = eg[i].next) {
		int j = eg[i].to;
		if (!dfn[j]) {
			tarjan(j);
			low[u] = min(low[u], low[j]);
		} else if (in_stk[j]) low[u] = min(low[u], dfn[j]);
	}

	if (dfn[u] == low[u]) {
		++ scc_cnt;
		int y;
		do {
			y = stk[top -- ];
			in_stk[y] = false;
			id[y] = scc_cnt;
			Size[scc_cnt] ++ ;
		} while (y != u);
	}
}

void Count_D() {
	rep(i, 1, n) dout[i] = din[i] = 0;
	rep(cur, 1, n)
	for (int i = head[cur]; ~i; i = eg[i].next) {
		int to = eg[i].to;
		if (id[cur] != id[to]) dout[id[cur]]++, din[id[to]]++;
	}
}
