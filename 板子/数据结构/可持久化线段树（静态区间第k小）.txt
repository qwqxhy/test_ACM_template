#include<bits/stdc++.h>
using namespace std;

#define int long long
#define fr first
#define se second

typedef pair<int, int> PII;
typedef unsigned long long ULL;

const int INF = 0X3f3f3f3f, N = 1e5 + 10, MOD = 1e9 + 10;

int n, m;
int a[N];

int idx;
int root[N];

vector<int> v;

struct NODE {
	int l, r;
	int cnt;
} tr[N * 4 + N * 21];

int find(int x) {
	return lower_bound(v.begin(), v.end(), x) - v.begin();
}

int build(int l, int r) {
	int q = ++idx;
	if (l == r) return q;
	else {
		int mid = l + r >> 1;
		tr[q].l = build(l, mid);
		tr[q].r = build(mid + 1, r);
		return q;
	}
}

int insert(int p, int l, int r, int x) {
	int q = ++idx;
	tr[q] = tr[p];
	if (l == r) {
		tr[q].cnt++;
		return q;
	} else {
		int mid = l + r >> 1;
		if (x <= mid) tr[q].l = insert(tr[p].l, l, mid, x);
		else tr[q].r = insert(tr[p].r, mid + 1, r, x);
		tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;
		return q;
	}
}

int query(int p, int q, int l, int r, int k) {
	if (l == r) return l;
	else {
		int mid = l + r >> 1;
		int cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;
		if (cnt >= k) return query(tr[p].l, tr[q].l, l, mid, k);
		else return query(tr[p].r, tr[q].r, mid + 1, r, k - cnt);
	}
}

void work() {
	cin >> n >> m;

	for (int i = 1; i <= n; i++) {
		cin >> a[i];
		v.push_back(a[i]);
	}


	sort(v.begin(), v.end());
	v.erase(unique(v.begin(), v.end()), v.end());

	int vs = v.size();
	root[0] = build(0, vs - 1);

	for (int i = 1; i <= n; i++)
		root[i] = insert(root[i - 1], 0, vs - 1, find(a[i]));

	while (m--) {
		int l, r, k;
		cin >> l >> r >> k;
		cout << v[query(root[l - 1], root[r], 0, vs - 1, k)] << endl;
	}

}

signed main() {

	work();

	return 0;
}